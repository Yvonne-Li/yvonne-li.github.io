<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en_US" /><updated>2025-06-06T22:35:17-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yvonne Li</title><subtitle>Hello Travellers!
</subtitle><author><name>Yvonne Li</name><email>yvonneli.dev@gmail.com</email></author><entry><title type="html">Software Testing</title><link href="http://localhost:4000/2025/05/22/Introduction-to-Software-Testing.html" rel="alternate" type="text/html" title="Software Testing" /><published>2025-05-22T00:00:00-04:00</published><updated>2025-05-22T00:00:00-04:00</updated><id>http://localhost:4000/2025/05/22/Introduction%20to%20Software%20Testing</id><content type="html" xml:base="http://localhost:4000/2025/05/22/Introduction-to-Software-Testing.html"><![CDATA[<p>Status: #review  #knowledge <br />
Tags: #SAT #testing #softwaredev</p>

<h1 id="cs6340-sat---introduction-to-software-testing">CS6340 SAT - Introduction to Software Testing</h1>
<h2 id="observations">Observations</h2>
<h3 id="the-need-for-specifications">the need for specifications</h3>
<ul>
  <li>testing checks whether program implementation agrees with program specification</li>
  <li>without a specification, there’s nothing to test</li>
  <li>testing a form of consistency checking between implementation and specification
    <ul>
      <li>recurring theme for software quality checking approaches</li>
      <li>what if implementation and specification are wrong?
        <h3 id="developer-tester">developer !=Tester</h3>
      </li>
    </ul>
  </li>
  <li>developer writes implementation, tester writes specification</li>
  <li>unlikely that both will independently make the same mistake</li>
  <li>Specifications useful even if written by developer itself
    <ul>
      <li>much simpler than implementation</li>
      <li>specification unlikely to have same mistake as implementation
        <h3 id="other-observations">Other observations</h3>
      </li>
    </ul>
  </li>
  <li>resources are finite
    <ul>
      <li>limit how many tests are written</li>
      <li>specifications evolve over time
        <ul>
          <li>tests must be updated over time</li>
        </ul>
      </li>
      <li>an idea: automated testing
        <h3 id="landscape-of-testing">Landscape of Testing</h3>
        <h4 id="specifications">Specifications</h4>
      </li>
    </ul>
  </li>
  <li>Pre- and Post-conditions
    <h4 id="measuring-test-suite-quality">Measuring Test Suite Quality</h4>
  </li>
  <li>Coverage Metrics</li>
  <li>Mutation Analysis
    <h4 id="classification-of-testing-approaches">Classification of Testing Approaches</h4>
  </li>
</ul>
<figure>
  <img src="/assets/images/posts/2025-05-22-01.png" alt="Description" />
  <figcaption>Testing Approaches Matrix</figcaption>
</figure>
<ul>
  <li><strong>Manual vs Automated</strong> based on human participation, if the software require more human interaction =&gt; more manual testing</li>
  <li><strong>black-box:</strong> tester can see nothing about the tested program internal mechanisms. Testers can only issue inputs to the program, observe program outputs and determine whether the observed outputs meet the specifications required.</li>
  <li><strong>White-box</strong> refers to testing in which the internal details of the program being tested are fully available to the tester. The tester can use these internal details to perform a more precise analysis of the tested program and uncover inputs that are more likely to trigger buggy behavior.</li>
  <li><strong>Gray box approaches:</strong> testing behaviors need to not be strictly black box or white box.</li>
  <li>feedback directed random testing</li>
  <li>symbolic execution that needs to inspect source code</li>
  <li>dynamic analysis in order to discover future tests</li>
</ul>

<h3 id="automated-vs-manual-testing">Automated vs Manual Testing</h3>
<p>Automated Testing:</p>
<ul>
  <li>find bugs more quickly</li>
  <li>no need to write tests</li>
  <li>if software changes, no need to maintain tests
Manual Testing</li>
  <li>efficient test suite</li>
  <li>potentially better coverage</li>
</ul>

<h3 id="black-box-vs-white-box-testing">Black-box vs white-box testing</h3>
<p>Black-box testing:</p>
<ul>
  <li>can work with code that cannot be modified</li>
  <li>doesn’t need to analyze or study code</li>
  <li>code can be in any format (managed, binary, obfuscated)
White-box</li>
  <li>efficient test suite</li>
  <li>potentially better coverage</li>
</ul>

<h3 id="automated-testing-problem">Automated testing problem</h3>
<ul>
  <li>automated testing is hard to do</li>
  <li>probably impossible for entire systems</li>
  <li>certainly impossible without specifications
    <h3 id="pre--and-post-conditions">Pre- and post-conditions</h3>
    <p>A pre-condition is a predicate assumed to hold before a function executes, one use of it is to ensure that a function does not operate in an undefined way on inputs that it was not designed to handle.
A post-condition is a predicate expected to hold after a function executes whenever the pre-condition also holds, one use of it is to ensure that a function’s output matches its specification (i.e. a function that squares a real number should not output a negative number).</p>
  </li>
</ul>

<p>pre- and post-condition can be considered as a special case of assertions, which we saw in the first lesson</p>
<h4 id="condition-example">Condition Example</h4>
<figure>
  <img src="/assets/images/posts/2025-05-22-02.png" alt="Description" />
  <figcaption>Testing Approaches Matrix</figcaption>
</figure>

<p>This code defines a generic Stack class template with a single method. Let me break it down:
<strong>Class Structure:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">class Stack&lt;T&gt;</code> - This is a template class where <code class="language-plaintext highlighter-rouge">T</code> is a placeholder for any data type</li>
  <li><code class="language-plaintext highlighter-rouge">T[] array</code> - An array that stores elements of type <code class="language-plaintext highlighter-rouge">T</code></li>
  <li><code class="language-plaintext highlighter-rouge">int size</code> - Tracks the current number of elements in the stack</li>
  <li><code class="language-plaintext highlighter-rouge">pop()</code> is a <strong>stack operation</strong> that removes and returns the top element from the stack.</li>
</ul>

<p><strong>The pop() method:</strong></p>
<ul>
  <li><strong>Precondition:</strong> <code class="language-plaintext highlighter-rouge">s.size() &gt; 0</code> - The stack must not be empty before calling pop</li>
  <li><strong>Implementation:</strong> <code class="language-plaintext highlighter-rouge">return array[--size];</code> - This decrements the size counter and returns the element at that position</li>
  <li><strong>Postcondition:</strong> <code class="language-plaintext highlighter-rouge">s'.size() == s.size() - 1</code> - After the operation, the new size is one less than the original size</li>
</ul>

<p><strong>How it works:</strong> The <code class="language-plaintext highlighter-rouge">--size</code> is key here - it’s pre-decrement, so if the stack originally has 3 elements (size = 3), calling pop() will:</p>
<ol>
  <li>Decrement size from 3 to 2</li>
  <li>Return <code class="language-plaintext highlighter-rouge">array[2]</code> (the top element, since array indices are 0-based)</li>
</ol>

<p><strong>The size() method:</strong> Simply returns the current value of the <code class="language-plaintext highlighter-rouge">size</code> variable.</p>

<p><strong>Preconditions and Postconditions</strong> are formal specifications that define what must be true before and after a method executes. They’re part of <strong>Design by Contract</strong>, a programming methodology that treats software components like legal contracts.</p>

<p><strong>Preconditions</strong></p>
<ul>
  <li><strong>What:</strong> Conditions that must be true when a method is called</li>
  <li><strong>Who’s responsible:</strong> The caller must ensure these are met</li>
  <li><strong>Purpose:</strong> Define valid inputs and system states</li>
</ul>

<p><strong>Postconditions</strong></p>
<ul>
  <li><strong>What:</strong> Conditions guaranteed to be true when a method returns successfully</li>
  <li><strong>Who’s responsible:</strong> The method implementation must ensure these hold</li>
  <li><strong>Purpose:</strong> Define what the method promises to deliver</li>
</ul>

<p><strong>How They Work with Assertions</strong>
Assertions are runtime checks that verify these contracts:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="no">T</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Precondition assertion</span>
    <span class="k">assert</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">:</span> <span class="s">"Stack is empty - cannot pop"</span><span class="o">;</span>
    
    <span class="no">T</span> <span class="n">result</span> <span class="o">=</span> <span class="n">array</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
    
    <span class="c1">// Postcondition assertion  </span>
    <span class="k">assert</span> <span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">:</span> <span class="s">"Size became negative after pop"</span><span class="o">;</span>
    
    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="more">More..</h4>
<p>Pre- and post-conditions</p>
<ul>
  <li>Most useful if they are executable
    <ul>
      <li>written in the programming language itself</li>
      <li>a special case of assertions</li>
    </ul>
  </li>
  <li>Need not be precise
    <ul>
      <li>may become more complex than the code</li>
      <li>but useful even if they do not cover every situation
        <h4 id="process-of-using-pre--and-post-conditions">Process of using Pre- and post-conditions</h4>
      </li>
    </ul>
  </li>
</ul>
<figure>
  <img src="/assets/images/posts/2025-05-22-03.png" alt="Description" />
  <figcaption>Pre- and Post-Condition</figcaption>
</figure>
<p>this framework doesn’t help write tests, but help with automating testing runs</p>

<figure>
  <img src="/assets/images/posts/2025-05-22-04.png" alt="Description" />
  <figcaption>Executable Post-conditions</figcaption>
</figure>

<h3 id="how-good-is-your-test-suit">How good is your test suit?</h3>
<ul>
  <li>how do we know that our test suite is good?
    <ul>
      <li>too few tests: may miss bugs</li>
      <li>too many tests.: costly to run, bloat and redundancy, harder to maintain</li>
    </ul>
  </li>
  <li>two approaches
    <ul>
      <li>code coverage metrics</li>
      <li>mutation analysis (or mutation testing)
        <h4 id="code-coverage">Code coverage</h4>
      </li>
    </ul>
  </li>
  <li>Metric to quantify extent to which a program’s code is tested by a given test suite</li>
  <li>Given as percentage of some aspect of the program executed in the tests</li>
  <li>Function coverage: fucntions called</li>
  <li>statement coverage: statements executed</li>
  <li>branch coverage: branches taken</li>
  <li>
    <h4 id="mutation-analysis">Mutation Analysis</h4>
  </li>
</ul>

<hr />

<h1 id="references">References</h1>]]></content><author><name>Yvonne Li</name><email>yvonneli.dev@gmail.com</email></author><summary type="html"><![CDATA[Status: #review #knowledge Tags: #SAT #testing #softwaredev]]></summary></entry><entry><title type="html">conda vs venv</title><link href="http://localhost:4000/2024/10/20/conda-vs-venv.html" rel="alternate" type="text/html" title="conda vs venv" /><published>2024-10-20T00:00:00-04:00</published><updated>2024-10-20T00:00:00-04:00</updated><id>http://localhost:4000/2024/10/20/conda-vs-venv</id><content type="html" xml:base="http://localhost:4000/2024/10/20/conda-vs-venv.html"><![CDATA[<p>conda needs a environment.yaml file to determine the packages needed</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv .venv
<span class="nb">source </span>myvenv/bin/activate
which python
pip <span class="nb">install</span> <span class="nt">-r</span> /Users/requirements.txt
pip3 uninstall <span class="nt">-r</span> requirements.txt <span class="nt">-y</span>
</code></pre></div></div>

<p>The only solution I found was to delete the <code class="language-plaintext highlighter-rouge">venv</code> and recreate it. I followed these steps but I’ll provide a brief summary for Windows:</p>

<ol>
  <li>Activate your virtualenv. Go to the parent folder where your Virtual Environment is located and run <code class="language-plaintext highlighter-rouge">venv\scripts\activate</code>. Keep in mind that the first name “venv” can vary.</li>
  <li>Create a requirements.txt file. <code class="language-plaintext highlighter-rouge">pip freeze requirements.txt</code></li>
  <li><code class="language-plaintext highlighter-rouge">deactivate</code> to exit the venv</li>
  <li><code class="language-plaintext highlighter-rouge">rm venv</code> to delete the venv</li>
  <li><code class="language-plaintext highlighter-rouge">py -m venv venv</code> to create a new one</li>
  <li><code class="language-plaintext highlighter-rouge">pip install -r requirements.txt</code> to install the requirements.</li>
</ol>

<p>to make sure install all the packages in requirements.txt</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>requirements.txt | <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">'/^\s*#.*$/d'</span> <span class="nt">-e</span> <span class="s1">'/^\s*$/d'</span> | xargs <span class="nt">-n</span> 1 python <span class="nt">-m</span> pip <span class="nb">install</span>
</code></pre></div></div>]]></content><author><name>Yvonne Li</name><email>yvonneli.dev@gmail.com</email></author><summary type="html"><![CDATA[conda needs a environment.yaml file to determine the packages needed]]></summary></entry></feed>